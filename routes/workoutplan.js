const express = require('express');
const router = express.Router();
const WorkoutPlan = require('../models/WorkoutPlan');

// ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω
router.post('/', async (req, res) => {
  try {
    const plan = new WorkoutPlan(req.body);
    await plan.save();
    res.status(201).json(plan);
  } catch (err) {
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞' });
  }
});

router.get('/next', async (req, res) => {
  try {
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω –∏–∑ –±–∞–∑—ã (–ø–æ–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã)
    const nextWorkout = await WorkoutPlan.findOne().populate('days.exercises.exerciseId');

    if (!nextWorkout) {
      return res.status(404).json({ error: '–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json(nextWorkout);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' });
  }
});

// üìÑ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω—ã
router.get('/', async (req, res) => {
  try {
    const plans = await WorkoutPlan.find().populate('days.exercises.exerciseId');
    res.json(plans);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤' });
  }
});

// üîç –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø–ª–∞–Ω –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const plan = await WorkoutPlan.findById(req.params.id).populate('days.exercises.exerciseId');
    if (!plan) return res.status(404).json({ error: '–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(plan);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞' });
  }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω
router.put('/:id', async (req, res) => {
  try {
    const plan = await WorkoutPlan.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!plan) return res.status(404).json({ error: '–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(plan);
  } catch (err) {
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞' });
  }
});

// üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω
router.delete('/:id', async (req, res) => {
  try {
    const result = await WorkoutPlan.findByIdAndDelete(req.params.id);
    if (!result) return res.status(404).json({ error: '–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ message: '–ü–ª–∞–Ω —É–¥–∞–ª–µ–Ω' });
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞' });
  }
});

module.exports = router;
